buildscript {
    repositories {
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.0'
        classpath 'com.guardsquare:proguard-gradle:7.0.0'
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.21'
}

dependencies {
    implementation(
            project(':xkcd-tool-core')
    )
}

compileKotlin {
    kotlinOptions.jvmTarget = 11
}

jar {
    manifest {
        attributes(
                'Main-Class': 'rip.deadcode.xkcdtool.cli.Main'
        )
    }

    // Fat jar
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: jar) {

    // Shrink対象のJAR
    injars jar.archivePath
    def javaHome = "C:\\Program Files\\Amazon Corretto\\jdk11.0.9_12"

    libraryjars files(
            "${javaHome}/jmods/java.base.jmod",
            "${javaHome}/jmods/java.logging.jmod",
            "${javaHome}/jmods/java.net.http.jmod",
            "${javaHome}/jmods/java.sql.jmod",
            "${javaHome}/jmods/java.xml.jmod",
    )

    // Fat JARを使わない場合、依存ライブラリーをlibraryjarsに追加する
//    libraryjars configurations.compile.files

    // 出力先 お好みでどうぞ
    outjars("${jar.destinationDir}/proguarded.jar")

    // Shrinkしないクラス
    keep("public class ${jar.manifest.attributes['Main-Class']} { public static void main(java.lang.String[]); }")

    dontwarn('sun.misc.Unsafe')
    dontwarn("com.google.errorprone.**")
    dontwarn("ch.qos.logback.**")
    dontwarn('afu.org.checkerframework.**')
    dontwarn("org.checkerframework.**")
    dontwarn('org.slf4j.**')

    dontobfuscate()
//    optimizations("!class/unboxing/enum")
    optimizations("code/simplification/cast")
}

// assemble実行時にProGuard
assemble.dependsOn(proguard)
